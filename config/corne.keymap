/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// Rename layers.
#define BASE 0
#define LOWER 1
#define RAISE 2

/ {
    behaviors {
        // Change the shift character for the comma key.
        comma_dash: mod_morph_comma_dash {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_DASH";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp MINUS>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        // Change the shift character for the period key.
        period_exclamation: mod_morph_period_exclamation {
            compatible = "zmk,behavior-mod-morph";
            label = "PERIOD_EXCLAMATION";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp EXCLAIM>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        // Send a combo that equates to emoji menu on a key press.
//        key42_macro: beacon {
//            compatible = "zmk,behavior-beacon";
//            label = "KEY42_MACRO";
//            #binding-cells = <0>;
//            sequence = <(KC_LCTRL, KC_LGUI, KC_SPC)>;
//        };
        backspace_del: backspace_del {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DEL";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DEL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };
};

/ {
    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <50>;
            key-positions = <20 21>;
            bindings = <&kp ESC>;
        };
    };
};

/ {
  keymap {
    compatible = "zmk,keymap";

    default_layer {
      bindings = <
        &kp TAB  &kp Q &kp W &kp E &kp R &kp T &kp Y &kp U &kp I &kp O &kp P &backspace_del
        &kp LCTRL &kp A &kp S &kp D &kp F &kp G &kp H &kp J &kp K &kp L &kp SEMI &kp SQT
        &mt LSHFT CAPSLOCK &kp Z &kp X &kp C &kp V &kp B &kp N &kp M &kp COMMA &kp DOT &kp FSLH &kp RSHIFT
        &kp LALT &kp LCMD &mt RAISE ENTER &mt RAISE SPACE &mo LOWER &none
      >;
    };

    lower_layer {
      bindings = <
        &trans &bt BT_SEL 0 &kp C_BRIGHTNESS_INC &kp C_VOL_UP &trans &trans &kp CARET &trans &trans &trans &trans &trans
        &trans &bt BT_SEL 1 &kp C_BRIGHTNESS_DEC &kp C_VOL_DN &kp C_PLAY_PAUSE &trans &kp PIPE &trans &trans &trans &trans &trans
        &trans &bt BT_CLR &trans &kp K_MUTE &trans &trans &kp BACKSLASH &trans &trans &trans &trans &trans
        &trans &trans &trans &trans &trans &trans
      >;
    };

    raise_layer {
      bindings = <
        &trans &kp GRAVE &kp UNDERSCORE &kp UP &kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS &kp DOLLAR &kp KP_EQUAL &kp N7 &kp N8 &kp N9 &trans
        &trans &kp AT_SIGN &kp LEFT &kp DOWN &kp RIGHT &kp AMPERSAND &kp PERCENT &kp PLUS &kp N4 &kp N5 &kp N6 &trans
        &trans &kp KP_MULTIPLY &kp LEFT_BRACKET &kp RIGHT_BRACKET &kp LESS_THAN &kp GREATER_THAN &kp HASH &kp N0 &kp N1 &kp N2 &kp N3 &trans
        &trans &trans &trans &trans &trans &trans
      >;
    };
  };
};
